// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace SteamTools.GameIdModels
{
    using System;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using Newtonsoft.Json.Serialization;

    public partial class Welcome
    {
        [JsonProperty("data")]
        public Data Data { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }
    }

    public partial class Data
    {
        public GameData DynamicProperty { get; set; }
    }

    public partial class GameData
    {
        [JsonProperty("_change_number")]
        public long ChangeNumber { get; set; }
        public Common Common { get; set; }

        [JsonProperty("depots")]
        public Depots Depots { get; set; }

    }

    public partial class Common
    {
        [JsonProperty("name")]
        public string Name { get; set; }
    }




    public partial class Depots
    {
      
        [JsonProperty("branches")]
        public Branches Branches { get; set; }

    }

    public partial class Branches
    {
        [JsonProperty("internal-test")]
        public Test InternalTest { get; set; }

        [JsonProperty("public")]
        public Public Public { get; set; }

        [JsonProperty("valvetest")]
        public Test Valvetest { get; set; }
    }

    public partial class Test
    {
        [JsonProperty("buildid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Buildid { get; set; }

        [JsonProperty("pwdrequired")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Pwdrequired { get; set; }

        [JsonProperty("timeupdated")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Timeupdated { get; set; }
    }

    public partial class Public
    {
        [JsonProperty("buildid")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Buildid { get; set; }

        [JsonProperty("timeupdated")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Timeupdated { get; set; }
    }




    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
   
    }
}
